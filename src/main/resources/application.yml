spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/logistic_ops
    username: logistic_user
    password: logistic_pass
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false

  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml

  security:
    user:
      name: admin
      password: admin123

logging:
  level:
    pl.logistic.logisticops: INFO
    org.springframework.security: WARN
    liquibase: INFO

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics

# ===================================
# üéØ STRATEGIA 2-POZIOMOWA API (TYLKO DOSTƒòPNE)
# ===================================

api:
  # üó∫Ô∏è POZIOM 1: Google Maps (g≈Ç√≥wne mapowanie tras)
  googlemaps:
    key: AIzaSyDlcNrZHl85TDrudlFC2HbxFUtg4wQvtKc
    url: https://maps.googleapis.com/maps/api

  # üöõ POZIOM 1: TomTom (ruch + infrastruktura)
  tomtom:
    key: w6LQqpqeOt0ITFzFHbeOzUjOqnN8alPu
    url: https://api.tomtom.com

  # ‚ùå HERE Maps WY≈ÅƒÑCZONE (brak klucza)
  here:
    api-key: ""
    base-url: https://discover.search.hereapi.com/v1

# ===================================
# ‚öôÔ∏è KONFIGURACJA APLIKACJI
# ===================================

app:
  # CORS dla React frontend
  cors:
    allowed-origins:
      - "http://localhost:3000"
      - "http://localhost:3001"
      - "https://your-frontend-domain.com"
    allowed-methods:
      - GET
      - POST
      - PUT
      - DELETE
      - PATCH
      - OPTIONS
    allowed-headers: "*"
    allow-credentials: true

  # Synchronizacja infrastruktury (TYLKO DOSTƒòPNE ≈πR√ìD≈ÅA)
  sync:
    infrastructure:
      enabled: true
      interval-hours: 6
      sources:
        openstreetmap: true    # ‚úÖ G≈Ç√≥wne ≈∫r√≥d≈Ço
        tomtom: true          # ‚úÖ Monitoring ruchu
        geoportal: false      # ‚ùå GDDKiA niedostƒôpne
        here: false           # ‚ùå Brak klucza API

  # Monitoring ruchu TomTom
  traffic:
    tomtom:
      enabled: true
      check-interval-minutes: 5
      incident-types:
        - ROAD_CLOSED
        - BRIDGE_CLOSED
        - CONSTRUCTION
        - ACCIDENT
        - TRAFFIC_JAM

  # Limity systemu
  limits:
    max-route-alternatives: 3
    max-waypoints-per-route: 10
    tracking-history-days: 30

  # Parametry tras
  routing:
    default-vehicle-speed-kmh: 60
    safety-margin-percent: 15
    max-detour-percent: 50
    fallback-strategy: "static-data"  # Gdy API niedostƒôpne
    prefer-tomtom-traffic: true       # Priorytet dla TomTom traffic

  # Parametry ogranicze≈Ñ (dla transport√≥w wojskowych)
  restrictions:
    critical-height-cm: 400     # Poni≈ºej tej wysoko≈õci = ALERT
    critical-weight-kg: 45000   # Powy≈ºej tej wagi = sprawd≈∫ mosty
    critical-axle-kg: 12000     # Powy≈ºej tego = sprawd≈∫ ograniczenia osi

# ===================================
# üì° WEBSOCKET REAL-TIME
# ===================================

websocket:
  endpoints:
    transport-tracking: "/topic/transport/{transportId}/tracking"
    infrastructure-alerts: "/topic/infrastructure/alerts"
    route-updates: "/topic/routes/updates"
    traffic-incidents: "/topic/traffic/incidents"

  intervals:
    position-update-ms: 5000
    alert-check-ms: 30000
    infrastructure-sync-ms: 300000

# ===================================
# üîß PROFILE DEVELOPMENT
# ===================================

---
spring:
  config:
    activate:
      on-profile: development

app:
  sync:
    infrastructure:
      interval-hours: 1  # Czƒôstsze w dev

logging:
  level:
    pl.logistic.logisticops: DEBUG

---
spring:
  config:
    activate:
      on-profile: production

  jpa:
    hibernate:
      ddl-auto: validate  # W produkcji tylko walidacja

app:
  sync:
    infrastructure:
      interval-hours: 12  # Rzadziej w produkcji

logging:
  level:
    root: WARN
    pl.logistic.logisticops: INFO