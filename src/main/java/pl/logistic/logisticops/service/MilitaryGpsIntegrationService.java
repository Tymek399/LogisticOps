package pl.logistic.logisticops.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;
import pl.logistic.logisticops.dto.VehicleTrackingDTO;
import pl.logistic.logisticops.enums.AlertLevel;
import pl.logistic.logisticops.model.*;
import pl.logistic.logisticops.repository.*;

import java.time.LocalDateTime;

/**
 * üõ°Ô∏è SERWIS INTEGRACJI Z BEZPIECZNYMI URZƒÑDZENIAMI GPS WOJSKOWYMI
 *
 * Obs≈Çuguje:
 * - üì° UrzƒÖdzenia GTX wojskowe
 * - üîí SzyfrowanƒÖ komunikacjƒô GPS
 * - üìç Bezpieczne pozycjonowanie GNSS
 * - üõ∞Ô∏è Systemy anty-jamming
 * - üì± Terminale wojskowe z GPS
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class MilitaryGpsIntegrationService {

    private final VehicleTrackingRepository trackingRepository;
    private final TransportRepository transportRepository;
    private final VehicleSpecificationRepository vehicleRepository;
    private final SimpMessagingTemplate messagingTemplate;
    private final AlertService alertService;

    /**
     * üì° INTEGRACJA Z URZƒÑDZENIAMI WOJSKOWYMI
     *
     * OBS≈ÅUGIWANE URZƒÑDZENIA:
     * - üõ°Ô∏è Harris Falcon III (szyfrowana komunikacja)
     * - üì° Rockwell Collins SINCGARS
     * - üîí Thales SOTAS (secure over-the-air)
     * - üì± Samsung Galaxy Tactical Edition
     * - üõ∞Ô∏è Garmin DAGR (Defense Advanced GPS Receiver)
     * - üìç Trimble Defense Solutions
     */

    /**
     * üîí Odbierz bezpieczne dane GPS z urzƒÖdzenia wojskowego
     */
    public void receiveSecureGpsData(MilitaryGpsData gpsData) {
        try {
            log.info("üõ°Ô∏è Receiving secure GPS data from device: {}", gpsData.getDeviceId());

            // 1. Walidacja bezpiecze≈Ñstwa
            if (!validateMilitaryDevice(gpsData)) {
                log.error("üö® SECURITY ALERT: Invalid military device: {}", gpsData.getDeviceId());
                createSecurityAlert(gpsData);
                return;
            }

            // 2. Deszyfrowanie danych GPS (je≈õli wymagane)
            GpsPosition decryptedPosition = decryptGpsData(gpsData);

            // 3. Aktualizacja pozycji pojazdu
            updateVehiclePosition(decryptedPosition);

            // 4. Sprawdzenie geofencing wojskowego
            checkMilitaryGeofencing(decryptedPosition);

            // 5. Real-time broadcast do operator√≥w
            broadcastSecurePosition(decryptedPosition);

        } catch (Exception e) {
            log.error("‚ùå Error processing military GPS data", e);
            createTechnicalAlert(gpsData, e.getMessage());
        }
    }

    /**
     * üõ°Ô∏è Walidacja urzƒÖdzenia wojskowego
     */
    private boolean validateMilitaryDevice(MilitaryGpsData gpsData) {
        // Sprawd≈∫ certyfikat bezpiecze≈Ñstwa
        if (!isValidMilitaryCertificate(gpsData.getSecurityCertificate())) {
            return false;
        }

        // Sprawd≈∫ czy urzƒÖdzenie jest zarejestrowane
        if (!isRegisteredMilitaryDevice(gpsData.getDeviceId())) {
            return false;
        }

        // Sprawd≈∫ integralno≈õƒá danych
        if (!verifyDataIntegrity(gpsData)) {
            return false;
        }

        return true;
    }

    /**
     * üîì Deszyfrowanie danych GPS (symulacja)
     */
    private GpsPosition decryptGpsData(MilitaryGpsData gpsData) {
        // W rzeczywisto≈õci tutaj by≈Çoby prawdziwe deszyfrowanie AES-256
        return GpsPosition.builder()
                .latitude(gpsData.getEncryptedLatitude())  // Po deszyfrowaniu
                .longitude(gpsData.getEncryptedLongitude()) // Po deszyfrowaniu
                .altitude(gpsData.getAltitude())
                .speed(gpsData.getSpeed())
                .heading(gpsData.getHeading())
                .accuracy(gpsData.getAccuracy())
                .timestamp(gpsData.getTimestamp())
                .vehicleId(gpsData.getVehicleId())
                .transportId(gpsData.getTransportId())
                .deviceId(gpsData.getDeviceId())
                .securityLevel("MILITARY")
                .build();
    }

    /**
     * üìç Aktualizacja pozycji pojazdu z danymi GPS
     */
    private void updateVehiclePosition(GpsPosition position) {
        try {
            Transport transport = transportRepository.findById(position.getTransportId())
                    .orElse(null);

            VehicleSpecification vehicle = vehicleRepository.findById(position.getVehicleId())
                    .orElse(null);

            if (transport == null || vehicle == null) {
                log.warn("‚ö†Ô∏è Transport or vehicle not found for GPS update");
                return;
            }

            // Stw√≥rz rekord tracking
            VehicleTracking tracking = VehicleTracking.builder()
                    .transport(transport)
                    .vehicle(vehicle)
                    .latitude(position.getLatitude())
                    .longitude(position.getLongitude())
                    .speedKmh(position.getSpeed())
                    .headingDegrees(position.getHeading())
                    .sensorData(buildMilitaryGpsSensorData(position))
                    .recordedAt(position.getTimestamp())
                    .build();

            trackingRepository.save(tracking);

            // Aktualizuj pozycjƒô transportu
            transport.setCurrentLatitude(position.getLatitude());
            transport.setCurrentLongitude(position.getLongitude());
            transportRepository.save(transport);

            log.debug("‚úÖ Updated military GPS position for transport {}", transport.getId());

        } catch (Exception e) {
            log.error("‚ùå Error updating vehicle position from military GPS", e);
        }
    }

    /**
     * üöß Sprawdzenie geofencing wojskowego
     */
    private void checkMilitaryGeofencing(GpsPosition position) {
        // Sprawd≈∫ czy pojazd nie wjecha≈Ç w strefy zakazane
        if (isInRestrictedMilitaryZone(position)) {
            alertService.createAlert(
                    "üö® MILITARY ALERT: Vehicle entered restricted zone",
                    AlertLevel.CRITICAL,
                    position.getTransportId(),
                    null,
                    "GEOFENCING_VIOLATION"
            );
        }

        // Sprawd≈∫ czy pojazd nie oddali≈Ç siƒô za bardzo od trasy
        if (isDeviatingFromRoute(position)) {
            alertService.createAlert(
                    "‚ö†Ô∏è Vehicle deviating from approved route",
                    AlertLevel.HIGH,
                    position.getTransportId(),
                    null,
                    "ROUTE_DEVIATION"
            );
        }
    }

    /**
     * üì° Broadcast bezpiecznej pozycji do operator√≥w
     */
    private void broadcastSecurePosition(GpsPosition position) {
        // Sanityzuj dane przed wys≈Çaniem (usu≈Ñ wra≈ºliwe informacje)
        VehicleTrackingDTO sanitizedDto = VehicleTrackingDTO.builder()
                .transportId(position.getTransportId())
                .vehicleId(position.getVehicleId())
                .latitude(position.getLatitude())
                .longitude(position.getLongitude())
                .speedKmh(position.getSpeed())
                .headingDegrees(position.getHeading())
                .recordedAt(position.getTimestamp())
                .build();

        // Wy≈õlij do autoryzowanych operator√≥w
        messagingTemplate.convertAndSend(
                "/topic/transport/" + position.getTransportId() + "/tracking/secure",
                sanitizedDto
        );
    }

    // ========================================
    // METODY BEZPIECZE≈ÉSTWA
    // ========================================

    private boolean isValidMilitaryCertificate(String certificate) {
        // Sprawdzenie certyfikatu wojskowego (symulacja)
        return certificate != null && certificate.startsWith("MIL-CERT-");
    }

    private boolean isRegisteredMilitaryDevice(String deviceId) {
        // Sprawdzenie czy urzƒÖdzenie jest w rejestrze wojskowym
        return deviceId != null && deviceId.matches("^(GTX|DAGR|SOTAS)-[0-9A-F]{8}$");
    }

    private boolean verifyDataIntegrity(MilitaryGpsData gpsData) {
        // Weryfikacja integralno≈õci danych (checksum, podpis cyfrowy)
        return gpsData.getChecksum() != null && gpsData.getChecksum().length() == 64;
    }

    private boolean isInRestrictedMilitaryZone(GpsPosition position) {
        // Sprawdzenie czy pozycja jest w strefie wojskowej (symulacja)
        // W rzeczywisto≈õci sprawdza≈Çoby bazƒô stref zakazanych
        return false;
    }

    private boolean isDeviatingFromRoute(GpsPosition position) {
        // Sprawdzenie odchylenia od zaplanowanej trasy
        // W rzeczywisto≈õci por√≥wnywa≈Çoby z approved route
        return false;
    }

    private String buildMilitaryGpsSensorData(GpsPosition position) {
        return String.format(
                "MILITARY_GPS{device:%s,accuracy:%.2fm,satellites:%d,security:%s}",
                position.getDeviceId(),
                position.getAccuracy(),
                8, // Symulacja liczby satelit√≥w
                position.getSecurityLevel()
        );
    }

    private void createSecurityAlert(MilitaryGpsData gpsData) {
        alertService.createAlert(
                "üö® SECURITY BREACH: Unauthorized military GPS device: " + gpsData.getDeviceId(),
                AlertLevel.CRITICAL,
                null,
                null,
                "SECURITY_BREACH"
        );
    }

    private void createTechnicalAlert(MilitaryGpsData gpsData, String error) {
        alertService.createAlert(
                "üîß Military GPS technical error: " + error,
                AlertLevel.MEDIUM,
                gpsData.getTransportId(),
                null,
                "TECHNICAL_ERROR"
        );
    }
}